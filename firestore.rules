/**
 * @fileoverview Firestore Security Rules for Flora Master application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model, where users can only
 * read, create, update, and delete data (questions, images, leaves, trees)
 * that they own.  All user-generated content is stored under the
 * /users/{userId} collection.
 *
 * Data Structure:
 * All data is nested under /users/{userId}, with subcollections for questions,
 * images, leaves, and trees.  This structure simplifies ownership checks.
 *
 * Key Security Decisions:
 * - Users can only manage their own data.
 * - Listing other users' data is disallowed.
 * - Data consistency is enforced by matching the document's internal authorId
 *   field with the userId in the path.
 *
 * Denormalization for Authorization:
 * The `authorId` field is denormalized into the Question, Image, Leaf, and Tree
 * entities. This allows security rules to make authorization decisions
 * without additional reads (get() calls) to other documents.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profile collection. Users can only read and write their own profile.
     * @path /users/{userId}
     * @allow (create) - User with ID 'user123' can create their own profile.
     *   Request: { auth: { uid: 'user123' }, resource.data.id: 'user123' }
     * @allow (get) - User with ID 'user123' can read their own profile.
     *   Request: { auth: { uid: 'user123' } }
     * @allow (update) - User with ID 'user123' can update their own profile.
     *   Request: { auth: { uid: 'user123' }, resource.data.id: 'user123' }
     * @allow (delete) - User with ID 'user123' can delete their own profile.
     *   Request: { auth: { uid: 'user123' } }
     * @deny (create) - User with ID 'user456' cannot create a profile for user 'user123'.
     *   Request: { auth: { uid: 'user456' }, resource.data.id: 'user123' }
     * @deny (get) - User with ID 'user456' cannot read the profile of user 'user123'.
     *   Request: { auth: { uid: 'user456' } }
     * @deny (update) - User with ID 'user456' cannot update the profile of user 'user123'.
     *   Request: { auth: { uid: 'user456' }, resource.data.id: 'user123' }
     * @deny (delete) - User with ID 'user456' cannot delete the profile of user 'user123'.
     *   Request: { auth: { uid: 'user456' } }
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure question collection under a user. Users can only manage their own questions.
     * @path /users/{userId}/questions/{questionId}
     * @allow (create) - User with ID 'user123' can create a question under their profile.
     *   Request: { auth: { uid: 'user123' }, resource.data.authorId: 'user123' }
     * @allow (get) - User with ID 'user123' can read a question under their profile.
     *   Request: { auth: { uid: 'user123' } }
     * @allow (list) - User with ID 'user123' can list questions under their profile.
     *   Request: { auth: { uid: 'user123' } }
     * @allow (update) - User with ID 'user123' can update a question under their profile.
     *   Request: { auth: { uid: 'user123' }, resource.data.authorId: 'user123' }
     * @allow (delete) - User with ID 'user123' can delete a question under their profile.
     *   Request: { auth: { uid: 'user123' } }
     * @deny (create) - User with ID 'user456' cannot create a question under the profile of user 'user123'.
     *   Request: { auth: { uid: 'user456' }, resource.data.authorId: 'user123' }
     * @deny (get) - User with ID 'user456' cannot read a question under the profile of user 'user123'.
     *   Request: { auth: { uid: 'user456' } }
     * @deny (list) - User with ID 'user456' cannot list questions under the profile of user 'user123'.
     *   Request: { auth: { uid: 'user456' } }
     * @deny (update) - User with ID 'user456' cannot update a question under the profile of user 'user123'.
     *   Request: { auth: { uid: 'user456' }, resource.data.authorId: 'user123' }
     * @deny (delete) - User with ID 'user456' cannot delete a question under the profile of user 'user123'.
     *   Request: { auth: { uid: 'user456' } }
     * @principle Enforces document ownership for writes and allows owner-only reads.
     */
    match /users/{userId}/questions/{questionId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.authorId == userId;
      allow update: if isExistingOwner(userId) && resource.data.authorId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure image collection under a user. Users can only manage their own images.
     * @path /users/{userId}/images/{imageId}
     * @allow (create) - User with ID 'user123' can create an image under their profile.
     *   Request: { auth: { uid: 'user123' }, resource.data.authorId: 'user123' }
     * @allow (get) - User with ID 'user123' can read an image under their profile.
     *   Request: { auth: { uid: 'user123' } }
     * @allow (list) - User with ID 'user123' can list images under their profile.
     *   Request: { auth: { uid: 'user123' } }
     * @allow (update) - User with ID 'user123' can update an image under their profile.
     *   Request: { auth: { uid: 'user123' }, resource.data.authorId: 'user123' }
     * @allow (delete) - User with ID 'user123' can delete an image under their profile.
     *   Request: { auth: { uid: 'user123' } }
     * @deny (create) - User with ID 'user456' cannot create an image under the profile of user 'user123'.
     *   Request: { auth: { uid: 'user456' }, resource.data.authorId: 'user123' }
     * @deny (get) - User with ID 'user456' cannot read an image under the profile of user 'user123'.
     *   Request: { auth: { uid: 'user456' } }
     * @deny (list) - User with ID 'user456' cannot list images under the profile of user 'user123'.
     *   Request: { auth: { uid: 'user456' } }
     * @deny (update) - User with ID 'user456' cannot update an image under the profile of user 'user123'.
     *   Request: { auth: { uid: 'user456' }, resource.data.authorId: 'user123' }
     * @deny (delete) - User with ID 'user456' cannot delete an image under the profile of user 'user123'.
     *   Request: { auth: { uid: 'user456' } }
     * @principle Enforces document ownership for writes and allows owner-only reads.
     */
    match /users/{userId}/images/{imageId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.authorId == userId;
      allow update: if isExistingOwner(userId) && resource.data.authorId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure leaf collection under a user. Users can only manage their own leaves.
     * @path /users/{userId}/leaves/{leafId}
     * @allow (create) - User with ID 'user123' can create a leaf under their profile.
     *   Request: { auth: { uid: 'user123' } }
     * @allow (get) - User with ID 'user123' can read a leaf under their profile.
     *   Request: { auth: { uid: 'user123' } }
     * @allow (list) - User with ID 'user123' can list leaves under their profile.
     *   Request: { auth: { uid: 'user123' } }
     * @allow (update) - User with ID 'user123' can update a leaf under their profile.
     *   Request: { auth: { uid: 'user123' } }
     * @allow (delete) - User with ID 'user123' can delete a leaf under their profile.
     *   Request: { auth: { uid: 'user123' } }
     * @deny (create) - User with ID 'user456' cannot create a leaf under the profile of user 'user123'.
     *   Request: { auth: { uid: 'user456' } }
     * @deny (get) - User with ID 'user456' cannot read a leaf under the profile of user 'user123'.
     *   Request: { auth: { uid: 'user456' } }
     * @deny (list) - User with ID 'user456' cannot list leaves under the profile of user 'user123'.
     *   Request: { auth: { uid: 'user456' } }
     * @deny (update) - User with ID 'user456' cannot update a leaf under the profile of user 'user123'.
     *   Request: { auth: { uid: 'user456' } }
     * @deny (delete) - User with ID 'user456' cannot delete a leaf under the profile of user 'user123'.
     *   Request: { auth: { uid: 'user456' } }
     * @principle Enforces document ownership for writes and allows owner-only reads.
     */
    match /users/{userId}/leaves/{leafId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure tree collection under a user. Users can only manage their own trees.
     * @path /users/{userId}/trees/{treeId}
     * @allow (create) - User with ID 'user123' can create a tree under their profile.
     *   Request: { auth: { uid: 'user123' } }
     * @allow (get) - User with ID 'user123' can read a tree under their profile.
     *   Request: { auth: { uid: 'user123' } }
     * @allow (list) - User with ID 'user123' can list trees under their profile.
     *   Request: { auth: { uid: 'user123' } }
     * @allow (update) - User with ID 'user123' can update a tree under their profile.
     *   Request: { auth: { uid: 'user123' } }
     * @allow (delete) - User with ID 'user123' can delete a tree under their profile.
     *   Request: { auth: { uid: 'user123' } }
     * @deny (create) - User with ID 'user456' cannot create a tree under the profile of user 'user123'.
     *   Request: { auth: { uid: 'user456' } }
     * @deny (get) - User with ID 'user456' cannot read a tree under the profile of user 'user123'.
     *   Request: { auth: { uid: 'user456' } }
     * @deny (list) - User with ID 'user456' cannot list trees under the profile of user 'user123'.
     *   Request: { auth: { uid: 'user456' } }
     * @deny (update) - User with ID 'user456' cannot update a tree under the profile of user 'user123'.
     *   Request: { auth: { uid: 'user456' } }
     * @deny (delete) - User with ID 'user456' cannot delete a tree under the profile of user 'user123'.
     *   Request: { auth: { uid: 'user456' } }
     * @principle Enforces document ownership for writes and allows owner-only reads.
     */
    match /users/{userId}/trees/{treeId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}